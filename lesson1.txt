# React-Tutorial
I am going to learn React. 

Topics to learn
- React Definition
- React App
- Components
- JSX 
- Props
- Conditional Rendering
- CSS in React
- Lists in React
- React States
- Crud in React
- React Lifecycle plus Use Efficiency
- API
- Fetching Data
- React Query
- React Hooks
- State Management
- Rooting in React
- React Forms with FormIK plus YUP
- Typescript in React
- React Best Practice
- Redux
- Optimization Techniques 
- Full Stack Project
- Testing in React

LESSON 1.

What is React?
React is a JavaScript library created by Facebook. It is used for making complex,
interactive user interfaces.  It can help us when creating UI or a website. 
It has become very popular in the last 5 years.

Using react has two methods. 
1. part of a website 
2. all the website, or Single Page Application (SPA) 
In this method, all the site considers as one component
and we have other components inside it.

Why has it become so popular?

It is fast and efficient
It is easy to understand & less verbose than the "vanilla" JS API
It helps separate functionality into small, understandable pieces
Using less codes 
Having massive community around it 
constantly updating  
Generally it makes our life easier and its using a lot in the world

React App
- when we create a new application it contains some folders and files such as
-README.md 
- gitignore sth for GitHub
- package-lock.json and package.json  (This comes when we start packages using npm)

- package.json is just json file that contains information about our project
and also dependencies that we have installed in our application. Its more
for doccumantation purposes and We can change them.

- node_modules contains all the packages and libraries that we have installed

- public folder witch contains a bunch of static files , logos , text files
and json files and also importantly an HTML file

BUT Why HTML file? When we are working on a react application, we are not 
creating HTML files. Because React provides us with a method of creating application
witch is a Single page application AND it means that our whole app exists in a 
one single HTML file witch is index.html . What happens is inside the index.html file
there is a div , a single div with a id of root and what react does is when you
enter in the website, react will grab all the code you write with javascript and put 
everything inside the div. One benefit of this is that we don't have to be downloading more 
files as we move our application. If we just have multiple HTML file for each page of 
our application we need to download that HTML file every single time you move on your app 
but with react its different and everything is downloaded before and we don't need to 
anything more when we navigate.

Our whole App will exist in JS files or Typescript file

Inside the index.js file we create a react element, a root to all of 
our code and we put inside the element in the html file with the id of root

***** Note that ***** All of the code in our project will initially
exist inside the App function in App.js file. 




What is a component?
Component is JS function that returns some sort of UI. some JSX
React heavily relies on a concept called "components". 
Components are like small Lego blocks for designing and developing user interfaces (UI). 
They can be stuck together in different ways to create new UI.

Let's have a look at an example: the GitHub header.
What are the logical "pieces" of UI? What could be a component?

Component tips
There are no hard & fast rules for making components. 
UIs can be split up into components in many different ways, 
requiring judgement based on your context.

Components should follow the Single Responsibility Principle
Each component should only have 1 "responsibility"
Should only do 1 thing
Components should have good, explicit names
This helps you to remember what the component's job is

Components are reusable and make our code to be less messy
We have to name them with capital letters

React Components
We looked at the beginning of the lesson at the concept of components. 
Now look at how components are made in React.

import React from "react";
import ReactDOM from "react-dom";

function HelloWorld() {
  return <div>Hello World</div>;
}

ReactDOM.render(<HelloWorld />, document.querySelector("#root"));

There are 3 important parts in this code:

First we import React. This is important because JSX
is converted to React.createElement calls. If the React variable
is undefined then this will fail.
We create a React component called HelloWorld.
We render the HelloWorld component into the element with the id of root.

DEFINITION
The process of rendering is turning the JSX elements returned by
the component function into DOM elements on the screen. 
This is done by React for you.

Component Composition
You can combine a component with another component to render both.
 This is called composition

 function Greeting() {
  return <span>Hello</span>;
}

function Mentor() {
  return <span>Ali</span>;
}

function HelloWorld() {
  return (
    <div>
      <Greeting />
      <Mentor />
    </div>
  );
}

In the HelloWorld component we are using a reference to the Greeting and Mentor 
components. React reads these references when rendering HelloWorld and so it renders 
the Greeting and Mentor child components.
We are also using some shorter syntax within the HelloWorld component.
 <Greeting /> is a shorter way of writing <Greeting></Greeting>, which is useful 
if we don't need to put anything inside the Greeting component.
Notice how the components that we write (HelloWorld, Greeting, Mentor) are written
using a camel case convention and always start with an uppercase letter.
And "regular DOM" components (div, span) are always lowercase? This is a convention
to let you know whether you are using a "regular DOM component" or a component that 
you have written. When you're making your own components, you should always start them
with an uppercase letter.

Arrow Functions for shorter syntax
Because a React component is a function, we can also use the arrow function syntax:

const HelloWorld = () => {
  return (
    <div>
      <h1>Hello World</h1>
    </div>
  );
};
This can be even shorter again if we use parentheses and implicit return:
const HelloWorld = () => (
  <div>
    <h1>Hello World</h1>
  </div>
);

Although this is shorter, it is less flexible as we cannot 
insert code that is not JSX. Like for example, a console.log:

// THIS DOES NOT WORK!
const HelloWorld = () => (
  console.log('Hello!');
  <div>
    <h1>Hello World</h1>
  </div>
);


Rendering with React

Remember how annoying it was to manage the DOM yourself in our previous lesson? 
The "vanilla" JavaScript APIs for updating the DOM are quite long and difficult 
to remember. React makes this easier by manipulating each DOM element itself, 
instead of you doing it manually. You give React a "description" of the DOM that
you want and it will update the DOM for you. React abstracts away the management 
of the DOM.
Let's take a look at an example. We are going to walk through how to render a
 <div> with the text "Hello World" within it.

How we could do this using "vanilla" JS? 
let divNode = document.createElement("div");
divNode.innerText = "Hello World";

Now convert to using React
const element = React.createElement("div", {
  children: "Hello World",
});

-WHAT IS JSX:

React is already helping us a bit by cleaning up some of the verbose vanilla JS APIs. 
However in a typical React application you would still use a lot of the React.createElement 
function. To improve the developer experience the React team developed JSX.
JSX is a syntax sugar that looks like HTML, but is actually converts to 
the React.createElement function when you run it.
Using JSX
const element = <div>Hello World</div>;

Its mixing HTML and JS together.
It means every single time you're gonna display some sort of UI in your
screen or a group of UIs, you're going to create a function that will return
some UI stuff, some HTML (Or better to say JSX as they are not really html )
this is a syntax presented by react witch makes it a lot easier to
mix rendering logic with UI stuff.
All of JSX will be rendered inside of some sort of JavaScript function 

Embedding JavaScript into JSX
So far all of the components we have looked at haven't been able to 
change - they are hard-coded. But this doesn't make very interesting websites. 
We want to use variables with different data. We can insert variables (and some 
other things) into our React components.
Anything in the JSX that is inside curly braces {} is interpreted as a regular 
JavaScript expression. That means you can use every object or function 
from JavaScript that we have learned so far. Let's look at an example

function Greeting() {
  const greetingWord = "Hello";

  return <span>{greetingWord}</span>;
}
Now instead of hard-coding the greeting in the Greeting component, 
we are using a variable. Remember that everything between the curly braces 
is just regular JavaScript. So we can use more than just variables

function Mentor() {
  const mentors = ["Ali", "Kash", "Davide", "German", "Gerald"];
  return <span>{mentors.join(", ")}</span>;
}
Now we have modified the Mentor component to use the Array.join method 
so that it lists several mentors' names. This works with other JS types:

function Addition() {
  return <span>{1 + 2 + 3}</span>;
}

function Weather() {
  const weatherData = {
    temperature: 5,
    location: "London",
  };

  return (
    <p>
      The temperature in {weatherData.location} is {weatherData.temperature}
    </p>
  );
}

function formatName(user) {
  return user.firstName + " " + user.lastName;
}

function Name() {
  const user = {
    firstName: "Bob",
    lastName: "Marley",
  };
  return <span>{formatName(user)}</span>;
}



******+
whenever we want to use any JS such as variables inside JSX we need
to put it inside the {}. 
Note that we can create variables inside the JS function (JSX) using
the html elements and return them whenever we want.


A common pattern in React is to use Array.map to loop through a list of items
and render a component for each one

const mentors = ["Ali", "Kash", "Davide", "German", "Gerald"];

function MentorsList() {
  return (
    <ul>
      {mentors.map((name) => (
        <li>{name}</li>
      ))}
    </ul>
  );
}

Here we are using Array.map to turn an array 
of strings into an array of components.

Keys
You may have noticed that we are now seeing a red error message 
in the Dev Tools: Warning: Each child in a list should have 
a unique "key" prop.. This error happens when you use Array.map 
to return a list of elements

const mentors = ["Ali", "Sub", "Loic", "Anthony", "Lucy", "Mozart"];

function MentorsList() {
  return (
    <ul>
      {mentors.map((name, index) => (
        <li key={index}>{name}</li>
      ))}
    </ul>
  );
}

Here we have added a key prop to the li element. The key prop has a special 
meaning in React. React uses key to keep track of each element in the list.

Importing/Exporting Components
Organise your code by importing and exporting components. This works in the
same way as regular JavaScript import and exports.

import Greeting from "./Greeting";
import Mentor from "./Mentor";

function HelloMentor() {
  return (
    <div>
      <Greeting />
      <Mentor />
    </div>
  );
}

We need to export our components to use them in other files:

function Greeting() {
  return <span>Hello</span>;
}

export default Greeting;

Name component files exactly the same as the component (including the capital letter). 
Do this every time.

-What is PROPS?
PropS is an JavaScript object that exists inside the argument of some sort of functions component.

Making an argument for Props
What's the problem with our HelloMentor component above?

The component HelloMentor is static. What if we want to say hello to a different mentor? 
We would have to change the code too! This is easy in our tiny application 
but for "real" applications this might be more difficult.
Instead, wouldn't it be good if we could change which mentor
we are saying hello to every time we render the component?
We could reuse the HelloMentor component for different mentor names.
This is what props are for.

What are Props?
Props are what we use in React to pass "arguments" to components. 
They are very similar to arguments in functions. You can "pass" props 
to components and you can use those props within a component.

First let's look at passing props to your components 

<Mentor name="Mozafar" />

Props are key-value pairs. In this example, the key is name and the value is the string 'Mozafar'. 
We can pass as many props as we like to a component.
We don't have to use strings; we can use any valid JavaScript data like numbers,
arrays and objects.
In JSX you can use curly braces {} to inject data that is not a string:

<Mentor age={30}>

Now look at using props that we have passed to a component

function Mentor(props) {
  console.log(props);
  return <span>{props.name}</span>;
}

React gives you access to props in the first argument to the component function.
We can inject props into our component using curly braces.
The props variable is a normal object with key-value pairs that match what was passed 
to the component. It is a variable and it can be used like any other variable. 
That includes injecting props into attributes:

<div id={"mentor-id-" + props.id}>{props.name}</div>

Or calculating new values:

<div>{props.age + 1}</div>


