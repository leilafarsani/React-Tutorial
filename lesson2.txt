Handling events
So far we have only looked at React apps that are "static": 
they don't respond to user input. This lesson we will look at 
making our apps dynamic.

Recap: First-class functions in JavaScrip
Before we look more at React we need to recap a concept in JavaScript. 
You may remember that functions in JavaScript are "first class" - that means 
we can pass a reference to a function (as a variable) and then call it elsewhere. 
Let's look at an example

function hello() {
  return "Hello!";
}

console.log(hello); // Logs: "Æ’ hello() {}"
console.log(hello()); // Logs: "Hello!"


In the example above hello is a reference to a function. In the first console.log 
we log out the whole function. The function is not called until we use parentheses (), 
so we only log the string "Hello!" in the second console.log.
This is a really important and useful in React, as we can make a function and pass
it to React so that it can call it when a user interacts with our app.


Event handlers in components
In previous lessons (not React) we learned how to attach 
event listeners with addEventListener:

// Create an event handler
function logWhenClicked() {
  console.log("buttonElement was clicked!");
}

// Listen for events and call the event handler when triggered
buttonElement.addEventListener("click", logWhenClicked);

We still need to listen to events in React,
but event handlers are set up in a slightly different way

function ClickLogger() {
  function logWhenClicked() {
    console.log("Button was clicked!");
  }

  return <button onClick={logWhenClicked}>Click me!</button>;
}

Every element in React has some special props that start with on 
that can be assigned to a function which will be called when the event is triggered.

Here's a few examples (a full list is available here):

onClick - the element was clicked
onCopy - the clipboard is used to copy some text
onKeyDown - a key is pressed down
onBlur - the element loses "focus"
onChange - only available for <input> & <select> (and a few others), triggered when changed
onDoubleClick - the element was double-clicked!
onPlay - a video starts playing
onSubmit - a form element is submitted
Notice that just like with addEventListener above, we pass the
function reference to onClick instead of calling the function.
If we call the function, it will run the function when we render,
not when the user clicks on the button.
(Remember that rendering is the term in React for inserting into the DOM).

NOTE
Think of it like this: we give the event handler to React, 
so that React can call our function when the element is clicked.

Passing Functions as Props
Sometimes we need to pass a function to another component as a prop, so that 
it can handle the event.

A common example for this is a Button component. This component adds some styling 
to a normal <button>, but still needs to be able to pass an event handler function 
to onClick. Let's look at an example

function ClickLoggerApp() {
  function logWhenClicked() {
    console.log("Button was clicked");
  }

  return (
    <div>
      <FancyButton handleClick={logWhenClicked} />
      <p>Then look in the console.</p>
    </div>
  );
}

function FancyButton(props) {
  return (
    <button className="my-fancy-classname" onClick={props.handleClick}>
      Click Me!
    </button>
  );
}

Notice how this is very similar to the example above where 
we created the handler and used it in the same component?
The only difference here is that we are passing the function
reference through a prop. We could even pass it through multiple
components as props.

Re-rendering components
So far we've seen that when the page loads, React calls our function
components. The JSX elements that are returned from the component 
functions are turned into the DOM for you by React.
To be able to react to changes, we need to re-render
our function components to get different JSX elements.
React can then update the DOM based on the new JSX elements.

Let's look at how a component is re-rendered

function Counter(props) {
  console.log(`Rendering. props.likeCount is ${props.likeCount}`);

  return <button id="like-button">Likes: {props.likeCount}</button>;
}

If you look in the console, you'll see that the component is rendered once 
when the page loads.
props.likeCount starts at 0, so React inserts "Count: 0" into the DOM.
We won't look at how this works at the moment, but behind the scenes 
there is some code that will listen for clicks on the button and
force React to update. That means when you click the button, 
the function component is called again (or re-rendered).
Now props.likeCount is 1. React now updates the DOM to make 
sure it shows the correct number. Every time we click the button,
the function component is called and React updates the DOM for us.
We don't need to worry about changing the DOM ourselves! 
This is what makes React so powerful. Even better, React will 
figure out exactly the right bits of the DOM that need to be changed,
a concept called the "virtual DOM". This makes it extremely efficient 
and fast.

State
State is a general concept in software engineering.
It is used when a part of your app needs to "remember" 
something that changes when people interact with it.

React Hooks
React has built-in functionality for initialising and updating 
state in our components. We will access state via a React Hook called useState.
Hooks are a new-ish feature in React. You may find older tutorials 
that don't use Hooks, but don't panic. The concepts we learn here are the same whether or not you use Hooks. 
We are looking at Hooks first because they are simpler to learn for beginners.

Importing useState
To be able to access the useState Hook, we first need to import it from the React package.
 Let's look at an example (interactive example):

 import React, { useState } from "react";
console.log(useState);

If we look at the console, useState is just a function. 
It lives inside the React code that you installed when you created the app.

To reference the useState function in our component, we need to import it from the React code. 
The curly braces around useState are a bit like writing:

import React from "react";
let useState = React.useState;

In fact we can just write React.useState in our component if we want! 
But to type a bit less code, we import it (using the curly braces)
once and then can just use useState.
